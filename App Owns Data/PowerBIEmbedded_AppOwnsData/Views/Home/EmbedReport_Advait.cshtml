@model PowerBIEmbedded_AppOwnsData.Models.EmbedConfig

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script src="https://npmcdn.com/es6-promise@3.2.1"></script>
<script src="~/scripts/powerbi.js"></script>

@if (!string.IsNullOrEmpty(Model.ErrorMessage))
{
    <div id="errorWrapper">
        <h2>
            Error
        </h2>
        <pre>
            @Model.ErrorMessage
        </pre>
    </div>

    return;
}

<h2>Embedded Report</h2>
@*<div>
    The following report is the first report found in the given group, or the reportId defined in Web.config. Feel free to change the code to match your needs.<br/><br/>
        @using (Html.BeginForm())
        {
            <div>
                <input type="checkbox" id="RLS" disabled>
                <label for="RLS">View as a different user</label>
            </div>
            <div id="noRLSdiv">
                <h8>This checkbox is disabled because the current report does not support providing effective user name</h8>
                <br />
                <h8>For more info, visit RLS link in the bottom of the page</h8>
            </div>
            <div id="RLSdiv" hidden="hidden">
                <div class="inputLineTitle">User name</div>
                <input type="text" name="username" value="@Model.Username" />
                <h8>User name is always required for RLS.</h8>
                <div class="inputLineTitle">Roles</div>
                <input type="text" name="roles" value="@Model.Roles" />
                <h8>Comma separeted roles, optional for SSAS, mandatory for roles defined in pbix</h8>
                <br /><br />
                <input type="submit" value="Reload" />
                <br /><br />
            </div>
        }
</div>*@
<div id="controls">
    <!--Geo: <select id="changeYear" onchange="dd(value);">
       <option value="dd">All</option>
       <option value="Geo">Geo</option>
       <option value="Search Intent Group">Search Intent Group</option>
       <option value="6010">6010</option>
       <option value="Hewlett , NY">Hewlett,NY</option>
       <option value="29-Palms , CA">29-Palms,CA</option>
       <option value="3360-Travis-Pointe , MI">3360-Travis-Pointe,MI</option>
       <option value="Alameda-Isles , Englewood , FL">Alameda-Isles,Englewood,FL</option>
       </select>-->
    <!--<input id="input" type="text">
    <button id="rec" class="material-icons" style="font-size:100px;color:black">mic_none</button>
    <div id="speak_text">Speak</div>-->

    <div class="row" style="background:#36c778;">
        <div class="col-1" style="margin:2px;padding:2px;color:white;text-align:center">
            <button id="rec" class="material-icons" style="font-size:50px;color:black">mic_none</button>
        </div>

        <div class="col-11" style="margin:4px;padding:2px;text-align:center"><input id="input" type="text"> </div>
    </div>
    <div class="row" style="background:#36c778;">
        <div class="col-1" style="margin:2px;padding-top:2px;color:#191970;text-align:center"><div id="speak_text">Speak</div></div>
        <div class="col-11" style="margin:2px;padding-top:6px;"><div class="pulsating-circle"></div></div>
    </div>
</div>
<div id="reportContainer"></div>
@*<button onclick="dashboardfilter();">Filter</button>*@

@*<div class="infoBox">
    Code is in files:<br />
    1) HomeController.cs<br />
    2) EmbedReport.cshtml
</div>*@

@*@Html.Partial("LiveDemoLink")*@

<script>
    // Read embed application token from Model
    var accessToken = "@Model.EmbedToken.Token";

    // Read embed URL from Model
    var embedUrl = "@Html.Raw(Model.EmbedUrl)";

    // Read report Id from Model
    var embedReportId = "@Model.Id";

    // Get models. models contains enums that can be used.
    var models = window['powerbi-client'].models;

    // Embed configuration used to describe the what and how to embed.
    // This object is used when calling powerbi.embed.
    // This also includes settings and options such as filters.
    // You can find more information at https://github.com/Microsoft/PowerBI-JavaScript/wiki/Embed-Configuration-Details.
    var config = {
        type: 'report',
        tokenType: models.TokenType.Embed,
        accessToken: accessToken,
        embedUrl: embedUrl,
        id: embedReportId,
        permissions: models.Permissions.All,
        settings: {
            filterPaneEnabled: true,
            navContentPaneEnabled: true
        }
    };

    // Get a reference to the embedded report HTML element
    var reportContainer = $('#reportContainer')[0];

    if ("@Model.Username" != "") {
        $("#RLS").prop('checked', true);
        $("#RLSdiv").show();
    }
    else
    {
        $("#RLS").prop('checked', false);
        $("#RLSdiv").hide();
    }

    if ("@Model.IsEffectiveIdentityRequired.GetValueOrDefault()" == "True") {
        $("#noRLSdiv").hide();
        $("#RLS").removeAttr("disabled");
        $("#RLS").change(function () {
            if ($(this).is(":checked")) {
                $("#RLSdiv").show(300);
            } else {
                $("#RLSdiv").hide(200);
            }
        });
    }
    else
    {
        $("#noRLSdiv").show();
    }
    // Embed the report and display it within the div container.
    var report = powerbi.embed(reportContainer, config);


    var responseTobeSpoken;
    var cityvalue = [];
	var categoryvalue = [];
	var segmentvalue = [];
    //var accessToken = "e6cd42f4dbba44e990325be56bfffefd";
    var accessToken = "b79a30aad1034ac28a86cef34f07b74f";

    var baseUrl = "https://api.api.ai/v1/";
    var filtervalue = [];
	var filtervalue2 = [];
	var filtervalue = [];
    var columnfilter;
	var columnfilter2;
	var columnfilter3;
    $(document).ready(function () {
        $("#input").keypress(function (event) {
            if (event.which == 13) {
                event.preventDefault();
                send();
            }
        }
                            );
        $("#rec").click(function (event) {
            switchRecognition();
        }
                       );
    }
                     );
    var recognition;
    function startRecognition() {
        recognition = new webkitSpeechRecognition();
        recognition.onstart = function (event) {
            updateRec();
        };
        recognition.onresult = function (event) {
            var text = "";
            for (var i = event.resultIndex; i < event.results.length; ++i) {
                text += event.results[i][0].transcript;
            }
            setInput(text);
            stopRecognition();
        };
        recognition.onend = function () {
            stopRecognition();
        };
        recognition.lang = "en-US";
        recognition.start();
    }
    function stopRecognition() {
        if (recognition) {
            recognition.stop();
            recognition = null;
        }
        updateRec();
    }
    function switchRecognition() {
        if (recognition) {
            stopRecognition();
        }
        else {
            startRecognition();
        }
    }
    function setInput(text) {
        $("#input").val(text);
        send();
    }
    function updateRec() {
        $("#rec").text(recognition ? "mic" : "mic_none");
        $("#speak_text").text(recognition ? "Stop" : "Speak");
        if (recognition) {
            $("#rec").css("color", "red");
            $("#rec").css("border", "1px solid red");
            $(".pulsating-circle").css("display", "block");
        }
        else {
            $("#rec").css("color", "black");
            $("#rec").css("border", "1px solid black");
            $(".pulsating-circle").css("display", "none");
        }
    }
    function send() {
        var text = $("#input").val();
        $.ajax({
            type: "POST",
            url: baseUrl + "query?v=20150910",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            headers: {
                "Authorization": "Bearer " + accessToken
            }
          ,
            data: JSON.stringify({
                query: text, lang: "en", sessionId: "somerandomthing"
            }
                                ),
            success: function (data) {

                console.log(data.result.parameters.City_US)
				console.log("data recieved from dialogflow===", data.result.parameters)
			
                //geovalue = data.result.parameters.number;


				//===================================================================================ADDED==============================


				if (data.result.parameters.City_US && data.result.parameters.Category && (data.result.parameters.Segment == null)) {
                    columnfilter = "City";
					columnfilter2 = "Category";
                   filtervalue = data.result.parameters.City_US;
				   filtervalue2 = data.result.parameters.Category;
                    console.log("filter value 1 is ", filtervalue);
					console.log("filter value 2 is ", filtervalue2);
                    for (i = 0; i < filtervalue.length; i++) {
                        cityvalue[i] = filtervalue[i];
						
                        console.log("inside for loop", cityvalue[i]);
                    }
					for (var j = 0; j < filtervalue2.length; j++) {
                        categoryvalue[j] = filtervalue2[j];
						console.log("inside for loop", categoryvalue[j]);
                    }
					
                    dashboardfilter2(columnfilter, columnfilter2, cityvalue, categoryvalue);
                    //dashboardfilter();
                   

                }
				else if (data.result.parameters.City_US && data.result.parameters.Segment && (data.result.parameters.Category == null)) {
                    columnfilter = "City";
					columnfilter2 = "Segment";
                   filtervalue = data.result.parameters.City_US;
				   filtervalue2 = data.result.parameters.Segment;
                    console.log("filter value 1 is ", filtervalue);
					console.log("filter value 2 is ", filtervalue2);
                    for (i = 0; i < filtervalue.length; i++) {
                        cityvalue[i] = filtervalue[i];
						
                        console.log("inside for loop", cityvalue[i]);
                    }
					for (var j = 0; j < filtervalue2.length; j++) {
                        segmentvalue[j] = filtervalue2[j];
						console.log("inside for loop", segmentvalue[j]);
                    }
					
                    dashboardfilter2(columnfilter, columnfilter2, cityvalue, segmentvalue);
                    //dashboardfilter();
                   

                }

				else if (data.result.parameters.Segment && data.result.parameters.Category && (data.result.parameters.City_US == null)) {
                    columnfilter = "Category";
					columnfilter2 = "Segment";
                   filtervalue = data.result.parameters.Category;
				   filtervalue2 = data.result.parameters.Segment;
                    console.log("filter value 1 is ", filtervalue);
					console.log("filter value 2 is ", filtervalue2);
                    for (i = 0; i < filtervalue.length; i++) {
                        categoryvalue[i] = filtervalue[i];
						
                        console.log("inside for loop", categoryvalue[i]);
                    }
					for (var j = 0; j < filtervalue2.length; j++) {
                        segmentvalue[j] = filtervalue2[j];
						console.log("inside for loop", segmentvalue[j]);
                    }
					
                    dashboardfilter2(columnfilter, columnfilter2, categoryvalue, segmentvalue);
                    //dashboardfilter();
                   

                }
				else if (data.result.parameters.City_US && data.result.parameters.Category && data.result.parameters.Segment) {
                    columnfilter = "City";
					columnfilter2 = "Category";
					columnfilter3 = "Segment"
                   filtervalue = data.result.parameters.City_US;
				   filtervalue2 = data.result.parameters.Category;
				   filtervalue3 = data.result.parameters.Segment;
                    console.log("filter value 1 is ", filtervalue);
					console.log("filter value 2 is ", filtervalue2);
					console.log("filter value 2 is ", filtervalue3);
                    for (i = 0; i < filtervalue.length; i++) {
                        cityvalue[i] = filtervalue[i];
						
                        console.log("inside for loop cityvalue", cityvalue[i]);
                    }
					for (var j = 0; j < filtervalue2.length; j++) {
                        categoryvalue[j] = filtervalue2[j];
						console.log("inside for loop categoryvalue", categoryvalue[j]);
                    }
					for (var k = 0; k < filtervalue3.length; k++) {
                        segmentvalue[k] = filtervalue3[k];
						console.log("inside for loop segmentvalue", segmentvalue[k]);
                    }
					
                    dashboardfilter3(columnfilter, columnfilter2, columnfilter3, cityvalue, categoryvalue, segmentvalue);
                    //dashboardfilter();
                   

                }
				//=============================================================================================================================================


                else if (data.result.parameters.City_US) {
                    columnfilter = "City";
                   filtervalue = data.result.parameters.City_US;
                    console.log("filter value is ", filtervalue);
                    for (i = 0; i < filtervalue.length; i++) {
                        cityvalue[i] = filtervalue[i];
                        console.log("inside for loop", cityvalue[i]);
                    }
                    dashboardfilter(columnfilter, cityvalue);
                    //dashboardfilter();
                    console.log(data.result.parameters.City_US);

                }

                else if (data.result.parameters.Category) {
                    columnfilter = "Category";
                    filtervalue = data.result.parameters.Category;
                    console.log("filter value is ", filtervalue);
                    for (i = 0; i < filtervalue.length; i++) {
                        cityvalue[i] = filtervalue[i];
                        console.log("inside for loop", cityvalue[i]);
                    }
                    dashboardfilter(columnfilter, cityvalue);
                    //dashboardfilter();
                    console.log(data.result.parameters.Category);

                }

                else if (data.result.parameters.Segment) {
                    columnfilter = "Segment";
                    filtervalue = data.result.parameters.Segment;
                    console.log("filter value is ", filtervalue);
                    for (i = 0; i < filtervalue.length; i++) {
                        cityvalue[i] = filtervalue[i];
                        console.log("inside for loop", cityvalue[i]);
                    }
                    dashboardfilter(columnfilter, cityvalue);
                    //dashboardfilter();
                    console.log(data.result.parameters.Segment);

                }

                responseTobeSpoken = data.result.fulfillment.speech;
                //alert(geovalue, responseTobeSpoken);
                console.log(responseTobeSpoken, cityvalue);
                setResponse(responseTobeSpoken);
            }
          ,
            error: function () {
                setResponse("Internal Server Error");
            }
        }
              );
        setResponse("Loading...");
    }

    function setResponse(val) {
        $("#response").text(val);
        var a = $("#response").text(val);
        var msg = new SpeechSynthesisUtterance(responseTobeSpoken);
        window.speechSynthesis.speak(msg);
        //alert(geovalue);
        //setTimeout(dd(geovalue,filter), 3000);
    }
	//====================================================================================ADDED FUNCTION========================================
	 function dashboardfilter2(columnfilter1, columnfilter2, dm, second) {
        console.log(" first", dm);
		 console.log("second", second);
        console.log("inside 2 filter section");

        // Build the filter you want to use. For more information, See Constructing
        // Filters in https://github.com/Microsoft/PowerBI-JavaScript/wiki/Filters.
       const filter = {
            $schema: "http://powerbi.com/product/schema#basic",
            target: {
                table: "Sample - Superstore CSV",
                column: columnfilter1
            },
            operator: "In",
            values: dm
           
  
        };
		const filter2 = {
            $schema: "http://powerbi.com/product/schema#basic",
            target: {
                table: "Sample - Superstore CSV",
                column: columnfilter2
            },
            operator: "In",
            values: second
            
  
        };
        // Get a reference to the embedded report HTML element
        var embedContainer = $('#reportContainer')[0];

        // Get a reference to the embedded report.
        report = powerbi.get(reportContainer);
		console.log("filter object 1", filter);
		console.log("filter object 2", filter2);
        // Set the filter for the report.
        // Pay attention that setFilters receives an array.
        report.setFilters([filter, filter2])
            .catch(function (errors) {
                Log.log(errors);
            });

    }


	function dashboardfilter3(columnfilter1, columnfilter2, columnfilter3, dm, Catv, Segv) {
        console.log(" city", dm);
		 console.log("category", Catv);
		 console.log("Segment", Segv);
        console.log("inside filter 3");

        // Build the filter you want to use. For more information, See Constructing
        // Filters in https://github.com/Microsoft/PowerBI-JavaScript/wiki/Filters.
       const filter = {
            $schema: "http://powerbi.com/product/schema#basic",
            target: {
                table: "Sample - Superstore CSV",
                column: columnfilter1
            },
            operator: "In",
            values: dm
           
  
        };
		const filter2 = {
            $schema: "http://powerbi.com/product/schema#basic",
            target: {
                table: "Sample - Superstore CSV",
                column: columnfilter2
            },
            operator: "In",
            values: Catv
            
  
        };
		const filter3 = {
            $schema: "http://powerbi.com/product/schema#basic",
            target: {
                table: "Sample - Superstore CSV",
                column: columnfilter3
            },
            operator: "In",
            values: Segv
            
  
        };
        // Get a reference to the embedded report HTML element
        var embedContainer = $('#reportContainer')[0];

        // Get a reference to the embedded report.
        report = powerbi.get(reportContainer);
		console.log("filter object 1", filter);
		console.log("filter object 2", filter2);
		console.log("filter object 3", filter3);
        // Set the filter for the report.
        // Pay attention that setFilters receives an array.
        report.setFilters([filter, filter2, filter3])
            .catch(function (errors) {
                Log.log(errors);
            });

    }
	//=====================================================================================================================



    function dashboardfilter(columnfilter, dm) {
        console.log("inside dashboard filter", dm);
        console.log("inside filter");

        // Build the filter you want to use. For more information, See Constructing
        // Filters in https://github.com/Microsoft/PowerBI-JavaScript/wiki/Filters.
        const filter = {
            $schema: "http://powerbi.com/product/schema#basic",
            target: {
                table: "Sample - Superstore CSV",
                column: columnfilter
            },
            operator: "In",
            values: dm
            //values: ["Aberdeen"]
  
        };

        // Get a reference to the embedded report HTML element
        var embedContainer = $('#reportContainer')[0];

        // Get a reference to the embedded report.
        report = powerbi.get(reportContainer);

        // Set the filter for the report.
        // Pay attention that setFilters receives an array.
        report.setFilters([filter])
            .catch(function (errors) {
                Log.log(errors);
            });


    }

     function loadImage() {
              document.getElementById("controls").style.display="block";
          }

</script>